// ================== –ò–ú–ü–û–†–¢–´ ==================
const express = require('express');
const mysql = require('mysql2/promise');
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');
const cors = require('cors');
require('dotenv').config();
const creatorsRoutes = require('./routes/creators');
const security = require('./middleware/security');

const encryption = require('./middleware/encryption');

// ================== –ù–ê–°–¢–†–û–ô–ö–ê APP ==================
const app = express();

// ======= MIDDLEWARE =======

// Body parsing
app.use(express.json({ limit: "10mb" }));
app.use(express.urlencoded({ extended: true }));

// CORS
app.use(cors({
    origin: 'http://localhost:3000',
    credentials: true
}));

// ======= API ROUTES =======
app.use("/api/creators", creatorsRoutes);

// Security middleware
app.use(encryption.decryptRequest);  // –¥–µ—à–∏—Ñ—Ä–æ–≤–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
app.use(encryption.encryptResponse); // —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ö–æ–¥—è—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö

app.use(security.securityHeaders);
app.use(security.rateLimitGeneral);
app.use(security.pathTraversalProtection);
app.use(security.sqlInjectionProtection);
app.use(security.xssProtection);

app.use('/uploads', express.static('uploads'));
// ================== –ö–û–ù–°–¢–ê–ù–¢–´ ==================
const PORT = process.env.PORT || 5000;
const JWT_SECRET = process.env.JWT_SECRET || 'your-secret-key';

// ================== –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ö –ë–î ==================
let db;
(async () => {
    try {
        db = await mysql.createPool({
            host: process.env.DB_HOST || 'localhost',
            user: process.env.DB_USER || 'tshirt_user',
            password: process.env.DB_PASS || 'TshirtPass123!',
            database: process.env.DB_NAME || 'tshirtbd'
        });
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MySQL —É—Å–ø–µ—à–Ω–æ');
    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MySQL:', err);
        process.exit(1);
    }
})();
module.exports = db; 

// ================== MIDDLEWARE ==================

// JWT Middleware
const authenticateToken = (req, res, next) => {
    const authHeader = req.headers['authorization'];
    const token = authHeader && authHeader.split(' ')[1];

    if (!token) {
        return res.status(401).json({ error: '–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω' });
    }

    jwt.verify(token, JWT_SECRET, (err, user) => {
        if (err) {
            return res.status(403).json({ error: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω' });
        }
        req.user = user;
        next();
    });
};

// Middleware –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–æ–≤ —Ç–æ–ª—å–∫–æ –¥–ª—è YouTuber
const requireYouTuber = (req, res, next) => {
    if (req.user.user_type !== 'youtuber') {
        return res.status(403).json({ error: '–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è —é—Ç—É–±–µ—Ä–æ–≤' });
    }
    next();
};

// ================== ROUTES ==================

// ============ AUTH ROUTES ============

// Register
app.post('/api/auth/register', async (req, res) => {
    try {
        const { username, email, password, user_type, full_name, channel_name, channel_subscribers } = req.body;

        if (!username || !email || !password) {
            return res.status(400).json({ error: '–õ–æ–≥–∏–Ω, email –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
        }

        if (password.length < 6) {
            return res.status(400).json({ error: '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤' });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        const [existingUsers] = await db.execute(
            'SELECT id FROM users WHERE username = ? OR email = ?',
            [username, email]
        );

        if (existingUsers.length > 0) {
            return res.status(400).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º –∏–ª–∏ email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' });
        }

        // –•—ç—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
        const passwordHash = await bcrypt.hash(password, 12);

        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const [result] = await db.execute(`
            INSERT INTO users (username, email, password_hash, user_type, full_name, channel_name, channel_subscribers)
            VALUES (?, ?, ?, ?, ?, ?, ?)
        `, [username, email, passwordHash, user_type || 'customer', full_name, channel_name, channel_subscribers || 0]);

        const userId = result.insertId;

        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è JWT
        const token = jwt.sign(
            { userId, username, user_type: user_type || 'customer' },
            JWT_SECRET,
            { expiresIn: '7d' }
        );

        res.status(201).json({
            success: true,
            message: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞',
            token,
            user: {
                id: userId,
                username,
                email,
                user_type: user_type || 'customer',
                full_name,
                channel_name
            }
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏' });
    }
});

// Login
app.post('/api/auth/login', async (req, res) => {
    try {
        const { username, password } = req.body;

        if (!username || !password) {
            return res.status(400).json({ error: '–õ–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
        }

        // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const [users] = await db.execute(
            'SELECT * FROM users WHERE username = ? OR email = ?',
            [username, username]
        );

        if (users.length === 0) {
            return res.status(401).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å' });
        }

        const user = users[0];

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
        const isPasswordValid = await bcrypt.compare(password, user.password_hash);
        if (!isPasswordValid) {
            return res.status(401).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å' });
        }

        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è JWT
        const token = jwt.sign(
            { userId: user.id, username: user.username, user_type: user.user_type },
            JWT_SECRET,
            { expiresIn: '7d' }
        );

        res.json({
            success: true,
            message: '–í—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω',
            token,
            user: {
                id: user.id,
                username: user.username,
                email: user.email,
                user_type: user.user_type,
                full_name: user.full_name,
                channel_name: user.channel_name,
                channel_subscribers: user.channel_subscribers
            }
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ' });
    }
});

// ============ PRODUCTS ROUTES ============

// ‚úÖ –ø—Ä–∏–º–µ—Ä —Å async/await
app.get('/api/products', async (req, res) => {
  try {
    const [rows] = await db.query("SELECT * FROM products");
    res.json({
      success: true,
      products: rows
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤:", error);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤" });
  }
});

// ============ YOUTUBERS ROUTES ============

// Get all YouTubers
app.get('/api/youtubers', async (req, res) => {
    try {
        const [youtubers] = await db.execute(`
            SELECT u.id, u.username, u.channel_name, u.channel_subscribers, u.avatar_url, u.bio,
                   (SELECT COUNT(*) FROM products WHERE youtuber_id = u.id AND is_active = true) as products_count
            FROM users u
            WHERE u.user_type = 'youtuber'
            ORDER BY u.channel_subscribers DESC
        `);

        res.json({ 
            success: true,
            youtubers 
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —é—Ç—É–±–µ—Ä–æ–≤:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});
// Get all Customers
app.get('/api/customers', async (req, res) => {
    try {
        const [customers] = await db.execute(`
            SELECT u.id, u.username, u.full_name, u.email, u.avatar_url, u.bio, u.created_at
            FROM users u
            WHERE u.user_type = 'customer'
            ORDER BY u.created_at DESC
        `);

        res.json({ 
            success: true,
            customers 
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});
// ================== STATIC FRONTEND ==================

// ================== START SERVER ==================
app.listen(PORT, () => {
    console.log(`üöÄ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ http://localhost:${PORT}`);
});
